Problem solving:

never underestimate the power of google
or stackoverflow

ask clarification questions
What are the datatypes ?
How much data is there ?
Who is the user?
What sort of list ? array or linked list ?
Are the numbers integers ?
What do the numbers represent ? Are they ages ?
How many customers do you have ? 

WRITE TEST FIRST - be sure to get all cases - THIS WILL PREVENT REWRITE - if you miss a case you can miss the correct algo entirely - agree on test cases before writting solution
IT IS SO EASY TO GLANCE OVER SPECIAL CASES - that you must pause and look for them, nulls, 0z, empty, etc.

--> Exemplify approach
solve for f(0) f(1) - simplest - then generalize - see if f(2) can be based on the previous solution - identify subproblems to solve

DO ON PAPER THE BASE CASES - FROM SIMPLEST CASE - base case

Write pseudo code first - make sure it solves the main points (problems)

GO VISUAL - anything that can be made and solved VISUALLY - pen, paper, etc

--> Pattern matching approach
--> Simplify and generalize
--> Base case && Build upon it
--> Data Structure - brute force
-->BRUTE FORCE approach CS Fundamentals: 
	sort
		bucket sort ? - array of List[] or just int[] and incrementing the value there
		selection sort ?
		insertion sort ?
		bubble sort ?
		heap sort ?
		merge sort ?
		quick sort ?
		quick 3 way sort ?
	search (binary and hash)
	graphs

recursive vs iterative
bitwise - for letters, small ranges - also good for subsets, combinatorics
dynamic programming

Data structures: 
	array, 
	hash, 
	stack, 
	heap, 
	queue, 
	priority queue

Known solved problems:
	subsets
	8 queen
	permutations
	combinatorics
	

GET REST + WATER - PLENTY OF IT

Go through algos - sedgewick book, then cracking the coding book... consider those

see if there is an known algo for that problem

considering holding a precomputed value as you add or remove - min, max, avg, etc...

TEST our algo on paper if nothing else - to see it work for a few cases

remember when you were the most effective - when you could VISUALIZE the structure in your head

check for edge cases: null, 0th, out of range

Typical mistakes:

 DOES THE LOOP END ? DOEST THE RECURSION END ? DO YOU HAVE THE END CONDITION IN PLACE ?

should brute force for more options - TAKE THE ALGO BOOK ONE BY ONE AND SEE IF THEY APPLY

horrible confusing names - MAKE IT CLEAR
methods that are FAAAAAR too complicated - should do ONLY ONE THING
CLASSES THAT ARE FAAAAR TOOOOOO BIG - DO BREAK DOWN
assumptions that go unverified - a set in stone - you should make a list of assumptions


How can we make it more efficient:
depends on properties of the things you sort
	bucket sort - for smaller things like age - does wonders


Prev interview exp:
- work myself to exhaustion preparing for interview - reading all the time even 5 min before interview - well...I need R&R... is it because i come from a paradigm of scarcity?
