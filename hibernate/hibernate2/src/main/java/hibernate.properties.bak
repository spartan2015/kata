hibernate.connection.driver_class = org.apache.derby.jdbc.EmbeddedDriver
hibernate.connection.url = jdbc:derby:jdbcDemoDB;create=true
hibernate.connection.username =
hibernate.connection.password =  
hibernate.dialect = org.hibernate.dialect.DerbyDialect
                            
                            
hibernate.c3p0.min_size = 5
hibernate.c3p0.max_size = 20
                            
hibernate.c3p0.timeout = 300
hibernate.c3p0.max_statements = 50
hibernate.c3p0.idle_test_period = 3000
                            
hibernate.show_sql = true
hibernate.format_sql = true

hibernate.use_identifier_rollback=true

#hibernate.transaction.factory_class option defaults to org.hibernate.transaction.JDBCTransactionFactory, which is the correct factory  for the Transaction API in Java SE and for direct JDBC.

#The hibernate.transaction.factory_class option must be set to org.  hibernate.transaction.JTATransactionFactory.
#  hibernate.transaction.manager_lookup_class option to configure
#  both: for example, to org.hibernate.transaction.JBossTransaction-
#  ManagerLookup. 
# chpate 2, section 2.4.1. Integration with JTA


#     With default settings, it’s also your responsibility to flush() each Session
#manually to synchronize it with the database (to execute all SQL DML). The
#Hibernate Transaction API did this automatically for you. You also have to close
#all Sessions manually. On the other hand, you can enable the hibernate.trans-
#action.flush_before_completion and/or the hibernate.transaction.auto_
#close_session configuration options and let Hibernate take care of this for you
#again—flushing and closing is then part of the internal synchronization proce-
#dure of the transaction manager and occurs before (and after, respectively) the
#JTA transaction ends. With these two settings enabled the code can be simplified
#to the following:


#You have to set some configuration options to enable CMT with Hibernate:
#  The hibernate.transaction.factory_class option must be set to org.hibernate.transaction.CMTTransactionFactory.
#  You need to set hibernate.transaction.manager_lookup_class to the
#  right lookup class for your application server.

#
#   hibernate.connection.isolation = 4
#    Hibernate sets this isolation level on every JDBC connection obtained from a
#connection pool before starting a transaction. The sensible values for this option
#are as follows (you may also find them as constants in java.sql.Connection):
#       1—Read uncommitted isolation
#    ■
#       2—Read committed isolation
#    ■
#       4—Repeatable read isolation
#    ■
#       8—Serializable isolation
#    ■
#
#Note that Hibernate never changes the isolation level of connections obtained
#from an application server-provided database connection in a managed environ-
#ment! You can change the default isolation using the configuration of your appli-
#cation server. (The same is true if you use a stand-alone JTA implementation.)

#If you don’t enable optimistic concurrency control, and by default it isn’t enabled,
#your application runs with a last commit wins strategy.


#          You have to enable this binding in your Hibernate configuration by set-
#ting the hibernate.current_session_context_class property to thread.


#                                                hibernate.current_session_
#context_class configuration option to managed. The other built-in options we’ve
#discussed are thread and jta,

