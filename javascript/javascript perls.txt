JavaScript is a prototypal inheritance language. That means that objects can inherit
properties directly from other objects. The language is class-free.

if (typeof Object.create !== 'function') {
 Object.create = function (o) {
 var F = function () {};
 F.prototype = o;
 return new F();
 };

now you can create a new object whose prototype is o

var someObject = { name: "Proto"};
var newObject = Object.create(someObject);
newObject.name


var middle = stooge["middle-name"] || "(none)";
flight.equipment && flight.equipment.model 

#iterating through object properties
for (name in another_stooge)


start with a single global variable:

var MYAPP = {};

then work in it:

MYAPP.stooge = {
 "first-name": "Joe",
 "last-name": "Howard"
};


Functions in JavaScript are objects


Objects are collections of name/value pairs having a hidden link to a prototype object
Objects produced from object literals are linked to Object.prototype.
Function objects are linked to Function.prototype (which is itself linked to Object.prototype)
 Every function is also created with two
additional hidden properties: 
	the function’s context (this)
	the code that implements 
The thing that is special about functions is that they can be invoked. the function’s behavior.

creation:
var add = function (a, b) {
 return a + b;
};

The optional second part is the function’s name
. The function can use its name to call itself recursively

Functions can be defined inside of other functions.
An inner function also enjoys access to the parameters and variables of the functions it is nested within.
The function object created by a function literal contains a link to that outer context. This is called closure. 
Invoking:
	every function receives two additional parameters: this and arguments
 The this parameter is very important in object oriented programming, and its value is determined by the invocation pattern

The Method Invocation Pattern: When a function is stored as a property of an object, we call it a method When a method is invoked, this is bound to that object
myObject.increment( );

The Function Invocation Pattern

When a function is not the property of an object, then it is invoked as a function
var sum = add(3, 4); 
When a function is invoked with this pattern, this is bound to the global object. This was a mistake in the design of the language.

myObject.double = function ( ) {
 var that = this; // Workaround.
 var helper = function ( ) {
 that.value = add(that.value, that.value);
 };
 helper( ); // Invoke helper as a function.
};

The Constructor Invocation Pattern

If a function is invoked with the new prefix, then a new object will be created with a
hidden link to the value of the function’s prototype member, and this will be bound
to that new object.

The new prefix also changes the behavior of the return statement

// Create a constructor function called Quo.
var Quo = function (string) {
 this.status = string;
};

// Give all instances of Quo a public method
Quo.prototype.get_status = function ( ) {
 return this.status;
};

// Make an instance of Quo.
var myQuo = new Quo("confused");


The Apply Invocation Pattern

The apply method takes two parameters. The first is the value that should be bound to this. The second is an array of parameters.
var array = [3, 4];
var sum = add.apply(null, array); 


arguments property of a function
var sum = function ( ) {
 var i, sum = 0;
 for (i = 0; i < arguments.length; i += 1) {
 sum += arguments[i];
 }
 return sum;
};
sum(4, 8, 15, 16, 23, 42)


Return
When a function is invoked, it begins execution with the first statement, and ends
when it hits the } that closes the function body.
A function always returns a value. If the return value is not specified, then undefined is returned.

If the function was invoked with the new prefix and the return value is not an object, then this (the new object) is returned instead.



Augmenting Types

JavaScript allows the basic types of the language to be augmented. In Chapter 3, we
saw that adding a method to Object.prototype makes that method available to all
objects. This also works for functions, arrays, strings, numbers, regular expressions,
and booleans.

Function.prototype.method = function (name, func) {
 this.prototype[name] = func;
 return this;
};

Number.method('integer', function ( ) {
 return Math[this < 0 ? 'ceiling' : 'floor'](this);
});

String.method('trim', function ( ) {
 return this.replace(/^\s+|\s+$/g, '');
});


Closure

The good news about scope is that inner functions get access to the parameters and
variables of the functions they are defined within (with the exception of this and
arguments). This is a very good thing

A more interesting case is when the inner function has a longer lifetime than its outer
function.

Suppose we wanted to protect the value from unauthorized changes:

var myObject = function ( ) {
 var value = 0;
 return {
 increment: function (inc) {
 value += typeof inc === 'number' ? inc : 1;
 },
 getValue: function ( ) {
 return value;
 }
 };
}( );


var quo = function (status) {
 return {
 get_status: function ( ) {
 return status;
 }
 };
};

// Make an instance of quo.
var myQuo = quo("amazed");

This quo function is designed to be used without the new prefix, so the name is not
capitalized. When we call quo, it returns a new object containing a get_status
method. A reference to that object is stored in myQuo. The get_status method still
has privileged access to quo’s status property even though quo has already returned.
get_status does not have access to a copy of the parameter; it has access to the
parameter itself. This is possible because the function has access to the context in
which it was created. This is called closure.

It is important to understand that the inner function has access to the actual variables
of the outer functions and not copies in order to avoid the following problem:

var add_the_handlers = function (nodes) {
 var i;
 for (i = 0; i < nodes.length; i += 1) {
 	nodes[i].onclick = function (e) {
 		alert(i);
 	};
 }
};

Would always print the last i value
this can be fixed with 

	nodes[i].onclick = function(param){
		return function(whatever){
			alert(param);
		} 		
 	}(i);


Modules and private variables


var protectedFunctionReplace = function ( ) {
// The entity table. It maps entity names to
// characters.
 var entity = {
 quot: '"',
lt: '<',
 gt: '>'
 };

 return this.replace(/&([^&;]+);/g,
 function (a, b) {
 var r = entity[b];
 return typeof r === 'string' ? r : a;
 }
 );
 };
}();


Curry

Function.method('curry', function ( ) {
 var slice = Array.prototype.slice,
 args = slice.apply(arguments),
 that = this;
 return function ( ) {
 return that.apply(null, args.concat(slice.apply(arguments)));
 };
});

 
var myTest = function(){ for(arg in arguments) console.log(arguments[arg]); }
var curriedFunction = myTest.curry(4,5,6);
curriedFunction (1,2,3)

returns 4,5,6,1,2,3 - so combining functions


var memoizer = function (memo, fundamental) {
 var shell = function (n) {
	 var result = memo[n];
	 if (typeof result !== 'number') {
		 result = fundamental(shell, n);
		 memo[n] = result;
	 }
	 return result;
	 };
 return shell;
};


var fibonacci = memoizer([0, 1], function (shell, n) {
 return shell(n - 1) + shell(n - 2);
});

var factorial = memoizer([1, 1], function (shell, n) {
 return n * shell(n - 1);
});


Inheritance


Pseudoclassical
JavaScript is conflicted about its prototypal nature. Its prototype mechanism is
obscured by some complicated syntactic business that looks vaguely classical.
Instead of having objects inherit directly from other objects, an unnecessary level of
indirection is inserted such that objects are produced by constructor functions.

var Mammal = function (name) {
 this.name = name;
};
Mammal.prototype.get_name = function ( ) {
 return this.name;
};

var Cat = function (name) {
 this.name = name;
 this.saying = 'meow';
};
// Replace Cat.prototype with a new instance of Mammal
Cat.prototype = new Mammal( ); // THIS IS WHERE INHERITANCE HAPPENS !!!

// Augment the new prototype with
// purr and get_name methods.


Function.method('inherits', function (Parent) {
 this.prototype = new Parent( );
 return this;
});


Even worse, there is a serious hazard with the use of constructor functions. If you
forget to include the new prefix when calling a constructor function, then this will
not be bound to a new object. Sadly, this will be bound to the global object, so
instead of augmenting your new object, you will be clobbering global variables. That
is really bad. There is no compile warning, and there is no runtime warning.
This is a serious design error in the language.


Prototypal

var myMammal = {
 name : 'Herb the Mammal',
 get_name : function ( ) {
 return this.name;
 },
 says : function ( ) {
 return this.saying || '';
 }
};

var myCat = Object.create(myMammal); // creates a new object and this new objects prototpye is assigned myMammal - no new nonsense


Functional

One weakness of the inheritance patterns we have seen so far is that we get no privacy.
All properties of an object are visible. 

var constructor = function (spec, my) {
	var that, other private instance variables;
	my = my || {};
	Add shared variables and functions to that
	that.newMethod = function(){}
	return that;
}

Advantage - you can have private variables


Parts:
var eventuality = function (that) {
 var registry = {};
 that.fire = function (event) {

var array,
 func,
 handler,
 i,
 type = typeof event === 'string' ?
 event : event.type;
if (registry.hasOwnProperty(type)) {
 array = registry[type];
 for (i = 0; i < array.length; i += 1) {
 handler = array[i];

func = handler.method;
 if (typeof func === 'string') {
 func = this[func];
 }

func.apply(this,
 handler.parameters || [event]);
 }
 }
 return this;
 };
 that.on = function (type, method, parameters) {
var handler = {
 method: method,
 parameters: parameters
 };
 if (registry.hasOwnProperty(type)) {
 registry[type].push(handler);
 } else {
 registry[type] = [handler];
 }
 return this;
 };
 return that;
};

eventuality(that);










Function.method('inherits', function (Parent) {
 this.prototype = new Parent( );
 return this;
});
