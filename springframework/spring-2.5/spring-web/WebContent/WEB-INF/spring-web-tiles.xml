<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"	
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
						http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
						">

	<bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles.TilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/tilesDefinitions.xml</value>
			</list>
		</property>
	</bean>


<bean id="viewResolver"
	class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	<property name="viewClass"
		value="org.springframework.web.servlet.view.tiles.TilesJstlView" />
</bean>


<!-- Creating Tile controllers -->
<!-- 

    A unique feature of Tiles is that each component on a page can have its own
controller. Be aware that this is a Tiles-specific controller, not to be confused with
a Spring MVC controller. Unfortunately, the word “controller” has been over-
loaded here, which can lead to some confusion. As we saw in chapter 13, Spring
MVC controllers process a request on behalf of DispatcherServlet. Tiles control-
lers, on the other hand, can be associated with Tiles components so that each
component can perform functionality specific to that component.


-->

</beans>