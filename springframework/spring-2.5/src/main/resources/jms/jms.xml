<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
						http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
						">

	<!--
		- the activemq messaging server should be started - download activemq
		from apache - tar -xzf file, enter dir bin, execute "activemq" -
		Obtaining connection
	-->
	<bean id="connectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="tcp://localhost:61616" />
	</bean>


	<!-- destination: a queue - point-to-point -->
	<bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg index="0" value="example.B" />
	</bean>

	<!-- destination: a topic - publish-subscribe -->
	<bean id="topDestinations" class="org.apache.activemq.command.ActiveMQTopic">
		<constructor-arg index="0" value="example.B" />
	</bean>

	<!--  and now of course the template pattern of spring: JmsTemplate -->
	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
		<!--
			<property name="defaultDestination" ref="queueDestionation" />

			<property name="receiveTimeout" value="60000" /> <property
			name="messageConverter" ref="messageConverterFromStringToMapMessage"
			/>
		-->
	</bean>


	<bean name="springSend" class="jms.SpringSend">
		<property name="jmsTemplate" ref="jmsTemplate" />
		<property name="destination" ref="queueDestination" />
	</bean>


	<bean name="springReceive" class="jms.SpringReceive">
		<property name="jmsTemplate" ref="jmsTemplate" />
		<property name="destination" ref="queueDestination" />
	</bean>


	<!-- convertors -->
	<bean name="messageConverterFromStringToMapMessage" class="jms.ObjectMessageConverter" />

	<!-- message listener -->
	<bean name="messageListener" class="jms.MessageListenerImpl" />

	<!-- message listener container -->
	<bean class="org.springframework.jms.listener.SimpleMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="queueDestination" />
		<property name="messageListener" ref="messageListener" />
		<!-- 
		or a pure pojo adapter
		
		<property name="messageListener" ref="purePojoMdp" />
		 -->
	</bean>

	<!-- a container listener with transaction support -->
	<bean
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="queueDestination" />
		<property name="messageListener" ref="messageListener" />
		<property name="transactionManager" ref="jmsTransactionManager" />
		<property name="messageListener" ref="purePojoMdp" />
	</bean>

	<bean id="jmsTransactionManager"
		class="org.springframework.jms.connection.JmsTransactionManager">
		<property name="connectionFactory" ref="connectionFactory" />
	</bean>


	<bean name="purePojoListener" class="jms.PurePojoListenerImpl" />
	<bean id="purePojoMdp"
		class="org.springframework.jms.listener.adapter.MessageListenerAdapter">
		<property name="delegate" ref="purePojoListener" />
		<property name="defaultListenerMethod" value="process" />
		<property name="messageConverter" ref="messageConverterFromStringToMapMessage" />
	</bean>


	<!-- 
	Lingo is a Spring-based remoting option that bridges the gap between RPC and
asynchronous messaging.
	            You can download Lingo from the Lingo homepage at http://
lingo.codehaus.org/Download
	<dependency>
  <groupId>org.logicblaze.lingo</groupId>
  <artifactId>lingo</artifactId>
  <version>1.3</version>
  <scope>compile</scope>
</dependency>
	
	 -->

	<bean id="server" class="org.logicblaze.lingo.jms.JmsServiceExporter">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="queueDestination" />
		<property name="service" ref="myRpcOverJmsService" />
		<property name="serviceInterface" value="jms.PurePojoListener" />
	</bean>

	<bean id="client" class="org.logicblaze.lingo.jms.JmsProxyFactoryBean">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="queueDestination" />
		<property name="serviceInterface" value="jms.PurePojoListener" />
	</bean>
	 
</beans>